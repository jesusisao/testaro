@import "styles/config.scss";

// hexとopacityからrgbaを作る関数
@function hexAndOpavityToRgba($hexcolor, $opacity) {
  $red: red($hexcolor);
  $green: green($hexcolor);
  $blue: blue($hexcolor);
  $alpha: alpha($hexcolor);

  @if $opacity == 1 or $opacity == 100% {
    @return unquote("rgba(#{$red},#{$green},#{$blue},#{$alpha})");
  } @else {
    @return unquote("rgba(#{$red},#{$green},#{$blue},#{$opacity})");
  }
}

.pageTitle {
  color: $config-accent-color;
  box-shadow: inset 16px 0px 10px -16px rgba(0, 217, 255, 0.8);
  padding: 15px;
  margin: 0 0 10px 0;
  opacity: 0.9;
  text-shadow: 0px 0px 4px rgba(0, 217, 255, 0.6);
}

.paramsOutputsContainer {
  display: flex;
  flex-wrap: wrap;
}

.paramsContainer {
  display: flex;
  flex-wrap: wrap;

  .paramContainer {
    background-color: rgba(0, 0, 0, 0.2);
    padding: 10px;
    box-shadow: 0 3px 10px 0 rgba(0, 0, 0, 0.5);
    box-sizing: border-box;
    margin: 10px;

    .paramLabel {
      margin: 0 0 10px 0;
      font-size: 1.1em;
    }

    input,
    select {
      background-color: rgba(0, 0, 0, 0);
    }
  }
}

.outputsContainer {
  display: flex;

  .outputContainer {
    background-color: rgba(0, 0, 0, 0.2);
    padding: 10px;
    box-shadow: 0 3px 10px 0 rgba(0, 0, 0, 0.5);
    box-sizing: border-box;
    margin: 10px;

    .outputLabel {
      margin: 0 0 10px 0;
      font-size: 1.4em;
    }
  }
}

.testaroButton {
  position: relative;
  margin: 5px 0;
  min-height: 45px;
  min-width: 120px;
  color: $config-font-color;
  background-color: $config-button-color;
  border: 0;
  box-sizing: border-box;
  border-radius: 5px;
  transition: 0.2s;
  outline: none;
  box-shadow: 0 0 10px 3px #101010 inset;

  &:hover {
    background-color: lighten($config-button-color, 15%);
    box-shadow: none;
  }

  &::before {
    content: "";
    pointer-events: none;
    transition: all 0.1s, transform 0.2s;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    border-radius: 5px;
    background-color: $config-button-accent-color;
    opacity: 0.4;
    z-index: 1;
    transform: scale(0, 1);
    box-shadow: 0 3px 20px 0 $config-button-accent-color;
  }

  &:hover::before {
    transform: scale(1, 1);
  }

  &:active::before {
    background-color: $config-button-clicked-color;
    box-shadow: 0 3px 20px 0 $config-button-clicked-color;
    opacity: 0.7;
  }

  .icon {
    margin-left: 5px;
    opacity: 0.3;
    width: 1em;
    height: 1em;
  }
}

.checkbox {
  appearance: none;
  margin: 8px;
  background-color: #ffffff !important;
  position: relative;
  width: 20px;
  height: 20px;
  border: 1px solid white;
  border-radius: 2px;
  cursor: pointer;
}

.checkbox:checked {
  background-color: $config-checkbox-color !important;
}

.checkbox:checked::after {
  content: "";
  position: absolute;
  top: 5px;
  left: 3px;
  width: 12px;
  height: 6px;
  border-bottom: 2px solid #ffffff;
  border-left: 2px solid #ffffff;
  transform: rotate(-45deg);
}
.textRight {
  text-align: right;
}

.nowrap {
  white-space: nowrap;
}
